import RPi.GPIO as GPIO
import time
import threading
import pytz
import logging
from datetime import datetime, time as datetime_time
from azure.iot.device import IoTHubDeviceClient, MethodResponse

# H·∫±ng s·ªë chuy·ªÉn ƒë·ªïi: 100ml t∆∞∆°ng ·ª©ng 3 gi√¢y
TIME_PER_100ML = 2.7
# H·∫±ng s·ªë chuy·ªÉn ƒë·ªïi: 100ml t∆∞∆°ng ·ª©ng 5 gi√¢y
TIME_PER_100ML_special = 3

# C·∫•u h√¨nh ch√¢n GPIO cho module relay
RELAY_PINS = [15, 18, 16, 20, 21, 23, 24, 25, 7]  # Ch√¢n GPIO k·∫øt n·ªëi v·ªõi 5 relay
AGITATOR_PIN = 8  # Ch√¢n GPIO k·∫øt n·ªëi v·ªõi m√°y khu·∫•y
# Pin 7: B∆°m nhu ƒë·ªông
# Pin 8: M√°y khu·∫•y.

# Thi·∫øt l·∫≠p logging
LOG_FILE = "app_betea/test/history_Dat.log"
VIETNAM_TZ = pytz.timezone("Asia/Ho_Chi_Minh")
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',)
logging.Formatter.converter = lambda *args: datetime.now(VIETNAM_TZ).timetuple()

# Thi·∫øt l·∫≠p GPIO
GPIO.setmode(GPIO.BCM)
for pin in RELAY_PINS:
    GPIO.setup(pin, GPIO.OUT)
    GPIO.output(pin, GPIO.LOW)  # Ban ƒë·∫ßu t·∫Øt t·∫•t c·∫£ relay

# Thay b·∫±ng connection string c·ªßa b·∫°n ·ªü ƒë√¢y
CONNECTION_STRING = "HostName=aicofi-iothub.azure-devices.net;DeviceId=1234567654321;SharedAccessKey=paZqJGqIR9kjg73/gdgIXH89cUdLpdSoizRukJMJ5YU="
# T·∫°o device client
device_client = IoTHubDeviceClient.create_from_connection_string(CONNECTION_STRING)
# K·∫øt n·ªëi t·ªõi IoT Hub
print("üîå Connecting to Azure IoT Hub...")
device_client.connect()

# H√†m x·ª≠ l√Ω khi c√≥ cloud-to-device method ƒë∆∞·ª£c g·ªçi
def method_request_handler(method_request):
    print(f"üì® Received direct method: {method_request.name}")
    print(f"üìù Payload: {method_request.payload}")
    msg= method_request.payload
    if method_request.name == "Agitator":
        if msg == "1":
            # threads = []
            threads.append(run_pump(AGITATOR_PIN, -1))
            logging.info("M√°y kh·∫•y b·∫Øt ƒë·∫ßu ho·∫°t ƒë·ªông")
            time.sleep(1)
            payload = {"result": True, "message": "Agitator started"}
            status = 200
        elif msg == "0":
            # threads = []
            threads.append(run_pump(AGITATOR_PIN, 0))
            logging.info("M√°y kh·∫•y ƒë√£ d·ª´ng")
            time.sleep(1)
            payload = {"result": True, "message": "Agitator stopped"}
            status = 200   

    elif method_request.name == "RunAll":
        # X·ª≠ l√Ω logic t√πy theo method name
        if msg == "#":
            # Ch·∫°y t·∫•t c·∫£ c√°c b∆°m li√™n t·ª•c
            threads = []
            for i in range(len(RELAY_PINS)):
                threads.append(run_pump(i, -1))  # -1 l√† ch·∫ø ƒë·ªô ch·∫°y li√™n t·ª•c
            logging.info("T·∫•t c·∫£ c√°c b∆°m ƒëang ch·∫°y li√™n t·ª•c")
        time.sleep(1)
        payload = {"result": True, "message": "Run All Done"}
        status = 200

    elif method_request.name == "StopAll":
        if msg == "0":
            # D·ª´ng t·∫•t c·∫£ c√°c b∆°m
            threads = []
            for i in range(len(RELAY_PINS)):
                threads.append(run_pump(i, 0))  # 0 l√† l·ªánh d·ª´ng
            logging.info("T·∫•t c·∫£ c√°c b∆°m ƒë√£ d·ª´ng")
        time.sleep(1)
        payload = {"result": True, "message": "Stop All Done"}
        status = 200

    elif method_request.name == "Pump":
        # X·ª≠ l√Ω c√°c l·ªánh th√¥ng th∆∞·ªùng - ch·∫°y ƒë·ªìng th·ªùi
        pump_commands = msg.split("|")
        active_threads = []
        for command in pump_commands:
            if not command:
                continue         
            pump_num, volume = map(int, command.split("-"))
            pump_index = pump_num - 1
            if 0 <= pump_index < len(RELAY_PINS):
                thread = run_pump(pump_index, volume)
                active_threads.append(thread)
            else:
                logging.error(f"S·ªë b∆°m kh√¥ng h·ª£p l·ªá: {pump_num}")
        # N·∫øu mu·ªën b√°o c√°o khi t·∫•t c·∫£ c√°c b∆°m ho√†n th√†nh:
        for thread in active_threads:
            thread.join()
        # logging.info("T·∫•t c·∫£ c√°c b∆°m ƒë√£ ho√†n th√†nh xong")
        logging.info("Done")
        logging.info("-" * 50)
        time.sleep(1)
        payload = {"result": True, "message": "Pump Done"}
        status = 200  
    else:
        payload = {"result": False, "message": "Method not supported"}
        status = 400

    # G·ª≠i response v·ªÅ cloud
    method_response = MethodResponse.create_from_method_request(method_request, status, payload)
    device_client.send_method_response(method_response)
#ƒëƒÉng k√≠ method handler
device_client.on_method_request_received = method_request_handler

# H√†m ch·∫°y m√°y b∆°m trong m·ªôt thread ri√™ng bi·ªát
def pump_thread(index, state):
    try:
        if state == -1:  # Ch·∫°y li√™n t·ª•c
            GPIO.output(RELAY_PINS[index], GPIO.HIGH)
            logging.info(f"B∆°m {index + 1} b·∫Øt ƒë·∫ßu ch·∫°y li√™n t·ª•c")
        elif state == 0:  # D·ª´ng
            GPIO.output(RELAY_PINS[index], GPIO.LOW)
            logging.info(f"B∆°m {index + 1} ƒë√£ d·ª´ng")
        else:  # Ch·∫°y theo th·ªùi gian ƒë·ªãnh s·∫µn
            run_time = (state / 100) * (TIME_PER_100ML_special if index == 4 else TIME_PER_100ML)
            GPIO.output(RELAY_PINS[index], GPIO.HIGH)
            logging.info(f"B∆°m {index + 1} ho·∫°t ƒë·ªông {run_time:.2f} gi√¢y (L∆∞u l∆∞·ª£ng: {state}ml)")
            time.sleep(run_time)
            GPIO.output(RELAY_PINS[index], GPIO.LOW)
            # logging.info(f"B∆°m {index + 1} ho√†n th√†nh")
    except Exception as e:
        logging.error(f"L·ªói khi ƒëi·ªÅu khi·ªÉn b∆°m {index + 1}: {str(e)}")
        GPIO.output(RELAY_PINS[index], GPIO.LOW)  # ƒê·∫£m b·∫£o t·∫Øt b∆°m khi c√≥ l·ªói

# ƒêi·ªÅu khi·ªÉn b∆°m b·∫±ng c√°ch t·∫°o thread ri√™ng
def run_pump(index, state):
    """Kh·ªüi ƒë·ªông m√°y b∆°m trong m·ªôt thread ri√™ng"""
    pump_th = threading.Thread(target=pump_thread, args=(index, state))
    pump_th.daemon = True
    pump_th.start()
    return pump_th

def main():
    try:
        logging.info("Kh·ªüi ƒë·ªông h·ªá th·ªëng")
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nƒêang d·ª´ng ch∆∞∆°ng tr√¨nh...")
        logging.info("D·ª´ng h·ªá th·ªëng")
    except Exception as e:
        logging.error(f"L·ªói: {str(e)}")
        print(f"L·ªói: {str(e)}")
    finally:
        # ƒê·∫£m b·∫£o t·∫Øt t·∫•t c·∫£ c√°c b∆°m khi k·∫øt th√∫c
        for pin in RELAY_PINS:
            GPIO.output(pin, GPIO.LOW)
        GPIO.cleanup()

if __name__ == "__main__":
    main()